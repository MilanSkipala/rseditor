#ifndef APPLICATION_H
#define APPLICATION_H

#include "includeHeaders.h"
#include "partsRelated.h"

/*
 * unified system of classes' and attributes' names - myTitle____, where ____ equals to Qclass name without 'Q'
 * all classes have atributes of pointer types (or list of pointers)ž
 */


class Database
{
    QList<ProductLine*> ProductLines;
    int currentProductLineIndex;
    int currentItemIndex;
public:
    Database();

    Database * getDatabase() const;
    ProductLine * findProductLineByName(QString &name) const;

    void setCurrentProductLine(QString &name);
    QString getCurrentProductLinesName();
    ProductLine * getCurrentProductLine();

    ModelItem * findModelItemByName(QString &manufactName, QString &partName) const;
    ModelItem * getNextModelItem(QString &manufactName) const;

    int addProductLine(ProductLine * manufact);
    //int addModelItem(QString manufactName, ModelItem * itemToAdd);//ProductLine's name
    int addModelItem(ModelItem *itemToAdd);


};

class SideBarWidget : public QScrollArea//QWidget
{
    QFrame * frameWidget;
    QGridLayout * layout;
    QComboBox * prodLineList;
    Database * database;
    QMenu * contextMenu;


public:

    SideBarWidget(Database * db, QWidget * parent = 0);
    SideBarWidget(Database * db, QMenu * context, QWidget * parent = 0); ///DO NOT USE THIS ONE
    Database * getDatabase() const;
    void contextMenuEvent(QContextMenuEvent * evt);
    void mousePressEvent(QMouseEvent * evt) ;
    void mouseMoveEvent(QMouseEvent * evt);

};

/*
 *WorkspaceWidget inherits from QScrollArea
 *
 *contains
 *-QGraphicsView
 *-list of QGraphicsScenes - modelFragments; each fragment consisting of QPainterPaths Items
 *
 */

class WorkspaceWidget : public QScrollArea ///IMPLEMENTATION INCOMPLETE
{
    QPainterPath * pp1;
    QFrame * frameWidget;
    QGraphicsView * graphicsView;
    QGraphicsScene * graphicsScene;
    QMenu * contextMenu;
    QList<ModelFragmentWidget*> * modelFragments;
    QList<ModelItem*> * selection;
    qreal scale;
public:
    WorkspaceWidget(QMenu* context, QWidget * parent = 0);

    int selectItem(ModelItem* item);///MISSING
    int deselectItem(ModelItem* item);///MISSING

    int connectFragments(ModelFragmentWidget * a, ModelFragmentWidget * b);///MISSING
    int connectFragments(int index1, int index2);///MISSING
    int disconnectFragments(ModelFragmentWidget * a, ModelFragmentWidget * b);///MISSING
    int disconnectFragments(int index1, int index2);///MISSING
    int addFragment(ModelFragmentWidget * frag);///MISSING
    int removeFragment(ModelFragmentWidget * frag);///MISSING
    int removeFragment(int index);///MISSING

    void contextMenuEvent(QContextMenuEvent * evt);///MISSING
    void mousePressEvent(QMouseEvent * evt) ;///MISSING
    void mouseMoveEvent(QMouseEvent * evt);///MISSING
    void wheelEvent(QWheelEvent *evt);///MISSING
    //void paintEvent(QPaintEvent *evt);///MISSING
};


class AppData //IMPLEMENTATION COMPLETE ����-NOT ENOUGH PIXMAPS-����
{
    QPixmap * newFilePixmap;
    QPixmap * openFilePixmap;
    QPixmap * saveFilePixmap;
    QPixmap * undoPixmap;
    QPixmap * redoPixmap;
    // ...


    Database * database;

public:
    AppData();
    QPixmap * getNewFilePixmap() const;
    QPixmap * getOpenFilePixmap() const;
    QPixmap * getSaveFilePixmap() const;
    QPixmap * getUndoPixmap() const;
    QPixmap * getRedoPixmap() const;
    // ...


    Database * getDatabase() const;
};

class Window : public QMainWindow ///IMPLEMENTATION INCOMPLETE
{
    QMenu * mainContextMenu;
    QMenuBar * mainMenuBar;
    QToolBar * mainToolBar;
    QStatusBar * mainStatusBar;
    WorkspaceWidget * workspace;
    SideBarWidget * sideBar;

public:
    Window();
    QMenu * getMainContextMenu() const;
    QMenuBar * getMainMenuBar() const;
    QStatusBar * getMainStatusBar() const;
    QToolBar * getMainToolBar() const;
    WorkspaceWidget * getWorkspaceWidget() const;
    SideBarWidget * getSideBarWidget() const;

    bool setMainContextMenu(QMenu * menu);
    bool setMainMenuBar(QMenuBar * menu);
    bool setMainStatusBar(QStatusBar * sb);
    bool setMainToolBar(QToolBar * toolBar);
    bool setWorkspaceWidget(WorkspaceWidget * ws);
    bool setSideBarWidget(SideBarWidget * sb);

    void contextMenuEvent(QContextMenuEvent * evt);
    void keyPressEvent(QKeyEvent * evt); ///MISSING

};

//probably should exist as a global variable (then you can remove some db and other pointers)
/* APPLICATION REQUIRES:
 * -Qt5 installed
 * -/etc/RTEditor/userpref.conf
 * or ./data/... on Windows
 */
class Application //IMPLEMENTATION COMPLETE
{
    Window * window; //dealloc?
    QString * userPreferences;//dealloc!
    AppData * appData;//dealloc!
    bool restrictedInventoryMode;
    bool allowMixedProductLines;

public:
    //Application(Window * wind,String * userPref, AppData * appDt, bool invMode);
    /**
      Application constructor - doesn't need any arguments, all paths are known.
      Application starts with empty database
     */
    Application();
    ~Application();

    Window * getWindow() const;
    QString * getUserPreferences() const;
    AppData * getAppData() const;
    bool getRestrictedInventoryMode() const;
    bool getAllowMixedProductLines() const;

    bool setAppData(AppData * d);
    bool setRestrictedInventoryMode(bool mode);
    bool setAllowMixedProductLines(bool mode);
    int setupUI();

};

#endif // APPLICATION_H
